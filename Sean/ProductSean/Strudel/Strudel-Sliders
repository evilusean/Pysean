Sliders - You can name your variables, and add sliders to control each effect :
"""
setCps(150/60/4) //150bpm

const BASS_ROLL_GAIN = slider(0.4, 0.1, 1)
const BASS_ROLL_LPF  = slider(1200, 300, 8000)
const BASS_ROLL_HPF  = slider(50, 20, 500)
const BASS_ROLL_DECAY = slider(0.8, 0, 5)
const BASS_ROLL_ROOM  = slider(0.5, 0, 1)
const BASS_ROLL_DELAY  = slider(0.4, 0, 2)
const BASS_ROLL_COARSE  = slider(0, -12, 12)

const BASS_SUB_GAIN = slider(0.5, 0, 1)
const BASS_SUB_LPF = slider(800, 100, 2000)
const BASS_SUB_HPF = slider(20, 10, 200)
const BASS_SUB_DECAY = slider(1.5, 0, 10)
const BASS_SUB_ROOM = slider(0.2, 0, 1)
const BASS_SUB_STRUCT = slider(0.5, 0, 1)

const BASSLINE_SUB = note("<d2 d3 <a2 a3> f#2 c#3>")
  .sound('gm_synth_bass_1')
  .gain(BASS_SUB_GAIN)
  .lpf(BASS_SUB_LPF)
  .hpf(BASS_SUB_HPF)
  .decay(BASS_SUB_DECAY)
  .struct("<d!16>") // adds bounce and groove
  .slow(2)
  .room(BASS_SUB_ROOM)
  .punchcard({ width: 608, height: 100 })

const HAT_GAIN = slider(0.6, 0, 1)
const OHAT_GAIN = slider(0.5, 0, 1)
const SHAKE_GAIN = slider(0.5, 0, 1)
const OHAT_GAIN = slider(0.25, 0.1, 1)
const SHAKE_GAIN = slider(0.2, 0.1, 1)

const BASSLINE_ROLLER = note("f#3 a3 c#4 dr a3 d4 f#3 a3 c#4") 
  .sound('sawtooth')
  .gain(BASS_ROLL_GAIN)
  .lpf(BASS_ROLL_LPF)
  .hpf(BASS_ROLL_HPF)
  .decay(BASS_ROLL_DECAY)
  .coarse(BASS_ROLL_COARSE)
  .delay(BASS_ROLL_DELAY)
  .struct("<d!8>")
  .room(BASS_ROLL_ROOM)
  .punchcard({ width: 600, height: 100})
"""
The Sliders :
The first part of the code defines sliders, which are user-interface elements that let you change a value in real-time. Each slider is assigned to a constant variable.

const BASS_SUB_GAIN = slider(0.5, 0, 1): This creates a slider to control the gain (volume) of the bass. The variable is named BASS_SUB_GAIN, which follows 
  the convention of [SOUND_TYPE]_[PARAMETER]. The values in parentheses are (initial value, minimum value, maximum value). 
  So, the slider starts at 0.5, with a range from 0 (silence) to 1 (full volume).

const BASS_SUB_LPF = slider(800, 100, 2000): This slider controls a low-pass filter (LPF), which cuts out high frequencies. 
  The variable name indicates it's for the bass's LPF. The value is in hertz (Hz).  The slider starts at 800 Hz and can be adjusted from 100 Hz to 2000 Hz.

const BASS_SUB_HPF = slider(20, 10, 200): This slider controls a high-pass filter (HPF), which cuts out low frequencies. 
  It starts at 20 Hz and ranges from 10 Hz to 200 Hz. This is often used to remove unwanted "rumble" from a sound.

const BASS_SUB_DECAY = slider(1.5, 0, 10): This controls the decay of the sound, which is how long it takes for a note to fade out after it's played. 
  The value is in seconds, starting at 1.5 and ranging from 0 (no decay) to 10 seconds.

const BASS_SUB_ROOM = slider(0.2, 0, 1): This slider controls a reverb effect, which simulates a sound being played in a room. 
  The variable is named BASS_SUB_ROOM for this effect. The value represents the mix of the reverb, ranging from 0 (no reverb) to 1 (fully wet, or all reverb).

const BASS_SUB_STRUCT = slider(0.5, 0, 1): This controls the structure of the sound, which often affects the wavetable or a similar synthesis parameter.
  It's used to morph the timbre of the sound. The value ranges from 0 to 1.

The Bassline :
The second part of the code defines the musical pattern itself and applies the effects controlled by the sliders.

const BASSLINE_SUB = note("<d2 d3 <a2 a3> f#2 c#3>"): This line defines the musical pattern of the bassline using Strudel's mini-notation. 
  The note() function contains a sequence of musical notes and chords. The <d2 d3 <a2 a3> f#2 c#3> part tells the program to play a sequence of notes: 
  d2, then d3, then a chord of a2 and a3, then f#2, and finally c#3.

.sound('gm_synth_bass_1'): This method sets the sound or instrument for the pattern. In this case, it's a specific synthesizer bass sound.

.gain(BASS_SUB_GAIN): This line applies the gain slider you defined earlier. The value of the BASS_SUB_GAIN slider is used to control the volume of the bassline.

.lpf(BASS_SUB_LPF) and .hpf(BASS_SUB_HPF): These lines apply the low-pass and high-pass filters, respectively, using the values from their corresponding sliders.

.decay(BASS_SUB_DECAY) and .room(BASS_SUB_ROOM): These apply the decay and reverb effects, using the values from their sliders.

.struct("<d!16>"): This is a structural pattern that adds a rhythmic bounce or a "groove" to the notes by repeating them or changing their rhythm based on the <d!16> pattern. 
  The d likely stands for a drum-like beat, and 16 means it will repeat at the sixteenth-note level.

.slow(2): This method makes the pattern play at half the speed of the overall song, or twice as slowly.

.punchcard({ width: 608, height: 100 }): This is a non-musical command that creates a visual punchcard representation of the pattern on the screen, which helps you see the rhythm and timing.































