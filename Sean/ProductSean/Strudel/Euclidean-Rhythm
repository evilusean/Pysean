Tangent : What is a Euclidean Rhythym? (not B! Elements) https://en.wikipedia.org/wiki/Euclidean_rhythm: 
  A Euclidean rhythm is a musical pattern created by distributing a certain number of events (or "pulses") as equally as possible within a given total number of steps.
  This method generates rhythms found across many cultures, such as the clave patterns in Afro-Cuban music or certain traditional drum rhythms from the Middle East.
  The algorithm for generating these rhythms was discovered by computer scientist Godfried Toussaint, who linked them to Euclid's algorithm for finding the greatest common divisor.
  In Strudel, you use the .struct() function along with a specific syntax to generate Euclidean rhythms.
  The basic syntax inside the .struct() function is a pattern string with two key parts: '1(P, E)'.
  Syntax Part	Strudel Meaning	Musical Meaning
  '1(...)'	Represents the event being played.	What sound or note is triggered.
  'P'	The first number inside the parentheses.	Pulses (P): The number of times the event will occur.
  'E'	The second number inside the parentheses.	Euclidean Steps (E): The total number of available steps in the pattern.
  '1(P,E),O' # 'O' = offset, offsets the pattern by the number in 'O'
  's("bd").struct("1(3,8)")' // Plays 3 events as evenly as possible over 8 steps. 
  You typically use .struct() to apply a rhythm to a source pattern, which is usually enclosed in angle brackets (<>).
  'note("<c e g b>").scale("c major").struct("1(5,12)").sound("sine")' // Source Pattern: Four notes // Rhythm: 5 pulses over 12 steps
  1. Offset/Rotation (The ',O' after the pattern) You can shift the start point of the rhythm using a comma followed by the number of steps to offset '(O)'.
  s("cp").struct("1(3,8),4") // Note the ",4" // The same 3 pulses over 8 steps, but rotated 4 steps forward.
  's("snare").struct("1(<3 5>, 8)")' // In the first bar, the rhythm uses 3 pulses. // In the second bar, it uses 5 pulses. // Then it repeats.
if you don't put the beat in '<>' angle brackets for a Euclid like '"<0 1 2 3>".struct("1(<3 5>,8),8")', it will skip over notes, instead of just doing timing
  It will only hit the '3/8' or '5/8' notes with out '<>' carrot brackets '"0 1 2 3 4 5 6 7".struct("1(<3 5>,8),8")',
  think of it like a pizza, each cycle is a pizza, with this you are dividing the pizza, with this you are playing through 8 equal parts, and selecting the '3' and '5'th slices
  without the '<>' brackets you are playing ALL the notes in one cycle, with the '<>' brackets you are playing ONLY ONE per cycle, so it only hits the timing on that ONE note

"<0 1 2 3>".struct("1(3,8)") # Generates a Euclidean rhythym that plays 3 events evenly across 8 steps.
"<0 1 2 3>".struct("1(3,8),8") # Applies the Euclidean rhythym with an offset of 8 steps, shifting the phrase's start time.
"<0 1 2 3>".struct("1(<3 5>,8),8") # Applies the Euclidean rhythym with an alternating pulse pattern (3 then 5) across bars, plus an 8-step offset.
'note("<c e g b>").scale("c major").struct("1(5,12)").sound("sine")' // Euclidean Rhythyms : Source Pattern: Four notes // Rhythm: 5 pulses over 12 steps
's("cp").struct("1(3,8),4")' // Euclidean Rhythym : Note the ",4" // The same 3 pulses over 8 steps, but rotated 4 steps forward.
's("snare").struct("1(<3 5>, 8)")' // Euclidean Rhythym : In the first bar, the rhythm uses 3 pulses. // In the second bar, it uses 5 pulses. // Then it repeats.
