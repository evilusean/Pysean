OSI Model - review
TCP/IP Protocols - review
Active Directory - MS Built in keylogger - Everything in a corporation ends in active directory, from identity management to secrets to logging, it's the heart of every corporation. 
  Attackers always crack active directory first and then start plundering and damaging the corporation from this central point.
  Do these hacking challenges that involve active directory networks and learn from that. Ofc you also need to know common attack techniques and tools and need to know how to program 
Basic Pentesting
SimCardSwap:
https://www.youtube.com/watch?v=2Ple9F5XOdE&ab_channel=MentalOutlaw
Man in The Middle
SOLID:
https://codefinity.com/blog/The%20SOLID%20Principles%20in%20Software%20Development
Naming Conventions

Awesome Robotics(curated page):
https://github.com/ahundt/awesome-robotics
Embedded Systems(C/Rust)
Electronics Engineering Skills(Soldering/OscilloScope/DataSheets+Schematics/PCB+Altium Design/
PCB Design:
https://www.youtube.com/watch?v=aODkA2mrimQ&ab_channel=Phil%E2%80%99sLab

Electrical Engineering:
https://www.ibiblio.org/kuphaldt/electricCircuits/
Piece of Paper Acquirer(any level) - Nice degREEEEEE you got there, credentialism? credSeanlism - that'll be 4 years and 100k before you won't be gatekept by hr :  
https://www.youtube.com/watch?v=Bicjxl4EcJg&ab_channel=ChromaLock

System Design(crawl-walk-run) create a MVP, solve an actual problem(translaSean=japanese->text->translator->readable text):
UI/UX Design Principles: https://www.youtube.com/watch?v=GS1d1L9umfo&ab_channel=StefanMischook

Cybersecurity:
Kali VM
pwnable.kr
hackthebox
tryhackme
hackthissite

Leetcode is easily teachable. It's just 15 overall patterns / approaches described in different ways. Having worked in Big Tech, I prefer the pre-Cracking the Coding Interview style of interviews.
Start with top 100 liked questions, start with 50 easy/medium, solve at least 20 questions for each 'topic' until it 'clicks', learn from the soluseans, if you are stuck on a problem for >45 min look up answer, review in 2 weeks 
'topics' = string -> two pointer -> sliding window -> binary search -> recursion -> binary tree -> backtracking -> BFS -> DFS -> graph -> linked list -> sort -> trie -> stack qeue -> priority qeue -> dynamic programming
Most Leetcode problems are recgonizing which core algorithm is required and succesfully implementing it - problem solving = pattern recgoniSean
8 Design Patterns:
https://neetcode.io/courses/lessons/8-design-patterns
Top 7 Algo's for coding interviews:
https://www.youtube.com/watch?v=kp3fCihUXEg&ab_channel=Codebagel
Sliding Window Pattern, Subset, Modified Binary Search, Top K Elements,Binary Tree DFS, Topological Sort, Binary Tree BFS,  2 pointer:
https://www.youtube.com/watch?v=xo7XrRVxH8Y&ab_channel=Sahil%26Sarra
NeetCode 150:
https://neetcode.io/
How to study DSA:
https://leetcode.com/discuss/general-discussion/494279/comprehensive-data-structure-and-algorithm-study-guide
https://www.youtube.com/watch?v=7UsYOo5_x0o&ab_channel=CodingMoney
DFS(depth first search) Algo(JS):
https://vishalrana9915.medium.com/depth-first-search-dfs-using-javascript-d59c5c200c7d
Binary Search Algo(JS):
https://www.geeksforgeeks.org/binary-search-in-javascript/
The Sliding Window Technique(JS):
https://dev.to/sanukhandev/the-sliding-window-technique-a-powerful-algorithm-for-javascript-developers-3nfm
https://www.geeksforgeeks.org/window-sliding-technique/
Hashmap:
https://medium.com/@lelianto.eko/hashmap-in-ja-3a5c03a8febc

jeetcode its actually based but infested with pajeets. every problem you solve add the subroutine to a class file. then add that project to github. then presto you just made a portfolio. if you dont have 6 cool projects pinned on 
your github you are a failure. leetcode is actually based because its readymade problems you can solve in your favorite language. shoot for building your github portfolio and focus on length of lines of code produced rather 
than quality of coding, add everything to github source control... everything. challenge yourself to do 10,000 lines of code in 2 months or so. start off doing as many easy problems as you can do. once you are satisfied
start trying some mediums. once you learn a new skill/data structure like linked lists or trees you will have some basic starter code to complete the problem, but then you can use variations of that same code to pop like 30
problems in a day with minimal adjustments. dont even look at hards until you are ready because almost all of them have big O notation run time complexities meaning something you can solve with a simple double for loop 
wont be accepted and actually needs to be using a famous linear algorithm in a computer science textbook like kadane or djisktra or euclid. fuckin rock that coding and get a jeetjob bro!
https://en.wikipedia.org/wiki/Big_O_notation
https://en.wikipedia.org/wiki/Time_complexity#Table_of_common_time_complexities
